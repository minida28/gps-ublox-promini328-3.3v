#include <Arduino.h>
// #include <NMEAGPS.h>
// #include <GPSport.h>
// #include <time.h>
#include "gpshelper.h"
#include "displayhelper.h"
#include "sholathelper.h"
#include "timehelper.h"

// #include <AltSoftSerial.h>
// AltSoftSerial gpsPort; // 8 & 9 for an UNO
// #define GPS_PORT_NAME "AltSoftSerial"
// #define DEBUG_PORT Serial

#define DEBUG_PORT Serial

// #define RELEASE

#ifndef RELEASE
#define DEBUGLOG(fmt, ...)                      \
    {                                           \
        static const char pfmt[] PROGMEM = fmt; \
        printf_P(pfmt, ##__VA_ARGS__);          \
    }
#else
#define DEBUGLOG(...)
#endif

int I2C_ClearBus()
{
#if defined(TWCR) && defined(TWEN)
    TWCR &= ~(_BV(TWEN)); //Disable the Atmel 2-Wire interface so we can control the SDA and SCL pins directly
#endif

    pinMode(SDA, INPUT_PULLUP); // Make SDA (data) and SCL (clock) pins Inputs with pullup.
    pinMode(SCL, INPUT_PULLUP);

    // Wait 2.5 secs, i.e. delay(2500). This is strictly only necessary on the first power
    // up of the DS3231 module to allow it to initialize properly,
    // but is also assists in reliable programming of FioV3 boards as it gives the
    // IDE a chance to start uploaded the program
    // before existing sketch confuses the IDE by sending Serial data.
    // Serial.println(F("Delay 2.5 secs to allow DS3231 module to initialize properly"));
    DEBUGLOG("Delay 2.5 secs to allow DS3231 module to initialize properly");
    delay(2500);
    boolean SCL_LOW = (digitalRead(SCL) == LOW); // Check is SCL is Low.
    if (SCL_LOW)
    {             //If it is held low Arduno cannot become the I2C master.
        return 1; //I2C bus error. Could not clear SCL clock line held low
    }

    boolean SDA_LOW = (digitalRead(SDA) == LOW); // vi. Check SDA input.
    int clockCount = 20;                         // > 2x9 clock

    while (SDA_LOW && (clockCount > 0))
    { //  vii. If SDA is Low,
        clockCount--;
        // Note: I2C bus is open collector so do NOT drive SCL or SDA high.
        pinMode(SCL, INPUT);        // release SCL pullup so that when made output it will be LOW
        pinMode(SCL, OUTPUT);       // then clock SCL Low
        delayMicroseconds(10);      //  for >5uS
        pinMode(SCL, INPUT);        // release SCL LOW
        pinMode(SCL, INPUT_PULLUP); // turn on pullup resistors again
        // do not force high as slave may be holding it low for clock stretching.
        delayMicroseconds(10); //  for >5uS
        // The >5uS is so that even the slowest I2C devices are handled.
        SCL_LOW = (digitalRead(SCL) == LOW); // Check if SCL is Low.
        int counter = 20;
        while (SCL_LOW && (counter > 0))
        { //  loop waiting for SCL to become High only wait 2sec.
            counter--;
            delay(100);
            SCL_LOW = (digitalRead(SCL) == LOW);
        }
        if (SCL_LOW)
        {             // still low after 2 sec error
            return 2; // I2C bus error. Could not clear. SCL clock line held low by slave clock stretch for >2sec
        }
        SDA_LOW = (digitalRead(SDA) == LOW); //   and check SDA input again and loop
    }
    if (SDA_LOW)
    {             // still low
        return 3; // I2C bus error. Could not clear. SDA data line held low
    }

    // else pull SDA line low for Start or Repeated Start
    pinMode(SDA, INPUT);  // remove pullup.
    pinMode(SDA, OUTPUT); // and then make it LOW i.e. send an I2C Start or Repeated start control.
    // When there is only one I2C master a Start or Repeat Start has the same function as a Stop and clears the bus.
    /// A Repeat Start is a Start occurring after a Start with no intervening Stop.
    delayMicroseconds(10);      // wait >5uS
    pinMode(SDA, INPUT);        // remove output low
    pinMode(SDA, INPUT_PULLUP); // and make SDA high i.e. send I2C STOP control.
    delayMicroseconds(10);      // x. wait >5uS
    pinMode(SDA, INPUT);        // and reset pins as tri-state inputs which is the default state on reset
    pinMode(SCL, INPUT);
    return 0; // all ok
}

// Print a string from Program Memory directly to save RAM
void OledPrintPGM(const char *str)
{
    char c;
    if (!str)
        return;
    while ((c = pgm_read_byte(str++)))
        u8x8.print(c);
} // end of printProgStr

void setup()
{
    DEBUG_PORT.begin(57600);
    while (!Serial)
        ;

    DisplaySetup();

    u8x8.setFont(u8x8_font_chroma48medium8_r);
    u8x8.setCursor(0, 0);
    u8x8.print(F("Starting up..."));

    // -------------------------------------------------------------------
    // Setup I2C stuffs
    // -------------------------------------------------------------------
    // DEBUGLOGLN("Clearing I2C Bus"); //http://www.forward.com.au/pfod/ArduinoProgramming/I2C_ClearBus/index.html
    int rtn = I2C_ClearBus(); // clear the I2C bus first before calling Wire.begin()
    if (rtn != 0)
    {
        // DEBUGLOG("I2C bus error. Could not clear");
        if (rtn == 1)
        {
            // DEBUGLOG("SCL clock line held low");
        }
        else if (rtn == 2)
        {
            // DEBUGLOG("SCL clock line held low by slave clock stretch");
        }
        else if (rtn == 3)
        {
            // DEBUGLOG("SDA data line held low");
        }
    }
    else
    {
        // DEBUGLOG("bus clear, re-enable Wire.begin();");
        // Wire.begin(SDA, SCL);
        Wire.begin();
    }

    // DisplaySetup();

    GPSSetup();

    delay(1000);

    GPSLoop();

    TimeSetup();

    // time_t now;
    struct tm *timeinfo;

    // now = time(nullptr);
    // timeinfo = gmtime(&now);
    timeinfo = localtime(&GPStimestamp);

    // timeinfo->tm_year = 2000 - 1900;
    // timeinfo->tm_mon = 9 - 1;
    // timeinfo->tm_mday = 27;

    DEBUGLOG("Current time: ");
    Serial.println(asctime(timeinfo));

    u8x8.clear();

    DEBUG_PORT.print(F("Setup completed\r\n"));
    // DisplaySetup();
}

void loop()
{
    GPSLoop();

    // DEBUG_PORT.print(validTimeFlag);

    // if (parseGPSCompleted)
    // {
    //     parseGPSCompleted = false;

    //     if (fix.status)
    //     {
    //         DEBUG_PORT.println(validGPSTimeFlag);
    //         // DEBUG_PORT.println();
    //     }
    //     else
    //     {
    //         DEBUG_PORT.print(validGPSTimeFlag);
    //     }
    // }

    if (parseGPSCompleted)
    {
        parseGPSCompleted = false;

        u8x8.setFont(u8x8_font_chroma48medium8_r);
        u8x8.setCursor(0, 0);
        u8x8.print(F("Sta:"));
        u8x8.print(GPSFixStatus());

        char buf[17];

        if (validGPSTimeFlag && validGPSDateFlag)
        {
            utcTime = GPStimestamp;

            localTime = utcTime + TimezoneSeconds();

            struct tm *timeinfo;
            timeinfo = localtime(&localTime);
            DEBUGLOG("Current time: ");
            Serial.println(asctime(timeinfo));


            // Date; Tue 18 Sep 2018
            // sprintf_P(buf, PSTR("%d %d %d %d"), timeinfo->tm_wday, timeinfo->tm_mday, timeinfo->tm_mon, timeinfo->tm_year);
            u8x8.setFont(u8x8_font_chroma48medium8_r);
            u8x8.setCursor(0, 1);
            // u8x8.print(F("Dat:"));
            u8x8.print(getDateStr(localTime));

            // Time
            sprintf_P(buf, PSTR("%02d:%02d:%02d"), timeinfo->tm_hour, timeinfo->tm_min, timeinfo->tm_sec);
            // getDateStr(localTime);
            u8x8.setFont(u8x8_font_chroma48medium8_r);
            u8x8.setCursor(0, 2);
            // u8x8.print(F("Tim:"));
            u8x8.print(buf);
            // u8x8.print(getTimeStr(localTime))
        }

        // Satellites
        if (1)
        {
            u8x8.setFont(u8x8_font_chroma48medium8_r);
            u8x8.setCursor(0, 3);
            u8x8.print(F("Sat:"));
            u8x8.print(GPSSatellites());
            u8x8.print("/");
            u8x8.print(GPSSatellitesCount());
        }

        // Latitude
        u8x8.setCursor(0, 4);
        u8x8.print(F("Lat:"));
        if (validGPSLocationFlag)
        {
            dtostrf(GPSLatitude(), 11, 6, buf);
            u8x8.print(buf);
        }
        else
        {
            OledPrintPGM(pgm_invalid);
        }

        // Longitude
        u8x8.setCursor(0, 5);
        u8x8.print(F("Lon:"));
        if (validGPSLocationFlag)
        {
            dtostrf(GPSLongitude(), 11, 6, buf);
            u8x8.print(buf);
        }
        else
        {
            OledPrintPGM(pgm_invalid);
        }

        // if (fix.valid.time)
        // {
        //     char buf[9];
        //     sprintf_P(buf, PSTR("%02d:%02d:%02d"), fix.dateTime.hours, fix.dateTime.minutes, fix.dateTime.seconds);
        //     u8x8.setFont(u8x8_font_chroma48medium8_r);
        //     u8x8.setCursor(0, 1);
        //     u8x8.print(F("Tim:"));
        //     u8x8.print(buf);
        // }
        // if (fix.valid.date)
        // {
        //     fix.dateTime.set_day();
        //     char buf[16]; // Tue 18 Sep 2018
        //     sprintf_P(buf, PSTR("%d %d %d %d"), fix.dateTime.day, fix.dateTime.date, fix.dateTime.month, fix.dateTime.year);
        //     u8x8.setFont(u8x8_font_chroma48medium8_r);
        //     u8x8.setCursor(0, 2);
        //     u8x8.print(F("Dat:"));
        //     u8x8.print(buf);
        // }
        // // if (fix.satellites)
        // if (1)
        // {
        //     u8x8.setFont(u8x8_font_chroma48medium8_r);
        //     u8x8.setCursor(0, 3);
        //     u8x8.print(F("Sat:"));
        //     u8x8.print(fix.satellites);
        //     u8x8.print("/");
        //     u8x8.print(gps.sat_count);
        // }

        // char buf[17]; // Lat: -180.000000
        // u8x8.setFont(u8x8_font_chroma48medium8_r);

        // // Latitude
        // u8x8.setCursor(0, 4);
        // u8x8.print(F("Lat:"));
        // if (fix.valid.location)
        // {
        //     dtostrf(fix.latitude(), 11, 6, buf);
        //     u8x8.print(buf);
        // }
        // else
        // {
        //     OledPrintPGM(pgm_invalid);
        // }

        // // Laongitude
        // u8x8.setCursor(0, 5);
        // u8x8.print(F("Lon:"));
        // if (fix.valid.location)
        // {
        //     dtostrf(fix.longitude(), 11, 6, buf);
        //     u8x8.print(buf);
        // }
        // else
        // {
        //     OledPrintPGM(pgm_invalid);
        // }

        // if (fix.valid.altitude)
        // {
        //     // DEBUG_PORT.print(fix.altitude());
        //     u8x8.setFont(u8x8_font_chroma48medium8_r);
        //     u8x8.setCursor(0, 6);
        //     u8x8.print(F("Alt:"));
        //     u8x8.print(fix.altitude());
        // }
        // if (fix.valid.speed)
        // {
        //     // DEBUG_PORT.print(fix.speed_kph());
        //     u8x8.setFont(u8x8_font_chroma48medium8_r);
        //     u8x8.setCursor(0, 7);
        //     u8x8.print(F("Spe:"));
        //     char buf[6]; // 109.1
        //     dtostrf(fix.speed_kph(), 5, 1, buf);
        //     u8x8.print(buf);
        //     u8x8.print(F("km/h"));
        // }
    }
}